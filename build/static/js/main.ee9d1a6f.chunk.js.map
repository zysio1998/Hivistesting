{"version":3,"sources":["redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","redux/data/dataActions.js","redux/blockchain/blockchainActions.js","styles/globalStyles.js","util/interact.js","HelloWorld.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","loading","account","smartContract","web3","errorMsg","blockchainReducer","state","action","type","payload","name","totalSupply","cost","error","dataReducer","rootReducer","combineReducers","blockchain","data","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFailed","fetchData","dispatch","a","getState","methods","call","console","log","connectFailed","connect","window","ethereum","isMetaMask","Web3EthContract","setProvider","Web3","request","method","accounts","SmartContractObj","SmartContract","on","updateAccount","location","reload","Screen","styled","div","image","SpacerXSmall","SpacerSmall","SpacerMedium","Container","flex","fd","jc","ai","test","TextTitle","p","TextDescription","createAlchemyWeb3","require","contractABI","connectWallet","eth","Contract","addressArray","obj","status","address","message","target","href","getCurrentWalletConnected","length","HelloWorld","useState","walletAddress","setWallet","setStatus","addWalletListener","useEffect","connectWalletPressed","walletResponse","id","onClick","String","substring","StyledButton","button","ResponsiveWrapper","App","wallet","useWallet","useDispatch","useSelector","feedback","setFeedback","claimingNft","setClaimingNft","claimNFTs","_mintAmount","mint","send","to","from","value","utils","toWei","toString","once","err","then","receipt","getData","style","textAlign","fontSize","fontWeight","Number","e","preventDefault","disabled","balance","chainId","reset","connectors","portis","dAppId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee9d1a6f.chunk.js","sourcesContent":["const initialState = {\r\n  loading: false,\r\n  account: null,\r\n  smartContract: null,\r\n  web3: null,\r\n  errorMsg: \"\",\r\n};\r\n\r\nconst blockchainReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CONNECTION_REQUEST\":\r\n      return {\r\n        ...initialState,\r\n        loading: true,\r\n      };\r\n    case \"CONNECTION_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        account: action.payload.account,\r\n        smartContract: action.payload.smartContract,\r\n        web3: action.payload.web3,\r\n      };\r\n    case \"CONNECTION_FAILED\":\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        errorMsg: action.payload,\r\n      };\r\n    case \"UPDATE_ACCOUNT\":\r\n      return {\r\n        ...state,\r\n        account: action.payload.account,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default blockchainReducer;\r\n","const initialState = {\r\n  loading: false,\r\n  name: \"\",\r\n  totalSupply: 0,\r\n  cost: 0,\r\n  error: false,\r\n  errorMsg: \"\",\r\n};\r\n\r\nconst dataReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CHECK_DATA_REQUEST\":\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: false,\r\n        errorMsg: \"\",\r\n      };\r\n    case \"CHECK_DATA_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        name: action.payload.name,\r\n        totalSupply: action.payload.totalSupply,\r\n        cost: action.payload.cost,\r\n        error: false,\r\n        errorMsg: \"\",\r\n      };\r\n    case \"CHECK_DATA_FAILED\":\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        error: true,\r\n        errorMsg: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default dataReducer;\r\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\r\nimport dataReducer from \"./data/dataReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  blockchain: blockchainReducer,\r\n  data: dataReducer,\r\n});\r\n\r\nconst middleware = [thunk];\r\nconst composeEnhancers = compose(applyMiddleware(...middleware));\r\n\r\nconst configureStore = () => {\r\n  return createStore(rootReducer, composeEnhancers);\r\n};\r\n\r\nconst store = configureStore();\r\n\r\nexport default store;\r\n","// log\r\nimport store from \"../store\";\r\n\r\nconst fetchDataRequest = () => {\r\n  return {\r\n    type: \"CHECK_DATA_REQUEST\",\r\n  };\r\n};\r\n\r\nconst fetchDataSuccess = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst fetchDataFailed = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const fetchData = (account) => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchDataRequest());\r\n    try {\r\n      let name = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.name()\r\n        .call();\r\n      let totalSupply = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.totalSupply()\r\n        .call();\r\n      let cost = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.cost()\r\n        .call();\r\n\r\n      dispatch(\r\n        fetchDataSuccess({\r\n          name,\r\n          totalSupply,\r\n          cost,\r\n        })\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\r\n    }\r\n  };\r\n};\r\n","// constants\r\nimport Web3EthContract from \"web3-eth-contract\";\r\nimport Web3 from \"web3\";\r\nimport SmartContract from \"../../contracts/NCC.json\";\r\n// log\r\nimport { fetchData } from \"../data/dataActions\";\r\n\r\nconst connectRequest = () => {\r\n  return {\r\n    type: \"CONNECTION_REQUEST\",\r\n  };\r\n};\r\n\r\nconst connectSuccess = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst connectFailed = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst updateAccountRequest = (payload) => {\r\n  return {\r\n    type: \"UPDATE_ACCOUNT\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const connect = () => {\r\n  return async (dispatch) => {\r\n    dispatch(connectRequest());\r\n    const { ethereum } = window;\r\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\r\n    if (metamaskIsInstalled) {\r\n      Web3EthContract.setProvider(ethereum);\r\n      \r\n      //document.getElementById (\"enableEthereumButton\").addEventListener('click', () => {ethereum.request({ method: 'eth_requestAccounts' });});\r\n      \r\n      let web3 = new Web3(ethereum);\r\n\r\n      //ethereum.request({ method: 'eth_requestAccounts' });\r\n      \r\n      try {\r\n        const accounts = await ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const networkId = await ethereum.request({\r\n          method: \"net_version\",\r\n        });\r\n        // const NetworkData = await SmartContract.networks[networkId];\r\n        if (networkId == 4) {\r\n          const SmartContractObj = new Web3EthContract(\r\n            SmartContract,\r\n            \"0x941C0CB3976cA5E2CEf5E5F46fe92433D35A0bd5\"\r\n          );\r\n          dispatch(\r\n            connectSuccess({\r\n              account: accounts[0],\r\n              smartContract: SmartContractObj,\r\n              web3: web3,\r\n            })\r\n          );\r\n          // Add listeners start\r\n          ethereum.on(\"accountsChanged\", (accounts) => {\r\n            dispatch(updateAccount(accounts[0]));\r\n          });\r\n          ethereum.on(\"chainChanged\", () => {\r\n            window.location.reload();\r\n          });\r\n          // Add listeners end\r\n        } else {\r\n          dispatch(connectFailed(\"Change network to ETH.\"));\r\n        }\r\n      } catch (err) {\r\n        dispatch(connectFailed(\"Something went wrong.\"));\r\n      }\r\n    } else {\r\n      dispatch(connectFailed(\"Install Metamask.\"));\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateAccount = (account) => {\r\n  return async (dispatch) => {\r\n    dispatch(updateAccountRequest({ account: account }));\r\n    dispatch(fetchData(account));\r\n  };\r\n};\r\n","import styled from \"styled-components\";\r\n\r\n// Used for wrapping a page component\r\nexport const Screen = styled.div`\r\n  background-color: var(--dark-grey);\r\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\r\n  background-size: cover;\r\n  background-position: center;\r\n  width: 100%;  \r\n  min-height: 80vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\n// Used for providing space between components\r\nexport const SpacerXSmall = styled.div`\r\n  height: 8px;\r\n  width: 8px;\r\n`;\r\n\r\n// Used for providing space between components\r\nexport const SpacerSmall = styled.div`\r\n  height: 16px;\r\n  width: 16px;\r\n`;\r\n\r\n// Used for providing space between components\r\nexport const SpacerMedium = styled.div`\r\n  height: 24px;\r\n  width: 24px;\r\n`;\r\n\r\n// Used for providing space between components\r\nexport const SpacerLarge = styled.div`\r\n  height: 32px;\r\n  width: 32px;\r\n`;\r\n\r\n// Used for providing a wrapper around a component\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex: ${({ flex }) => (flex ? flex : 0)};\r\n  flex-direction: ${({ fd }) => (fd ? fd : \"column\")};\r\n  justify-content: ${({ jc }) => (jc ? jc : \"flex-start\")};\r\n  align-items: ${({ ai }) => (ai ? ai : \"flex-start\")};\r\n  background-color: ${({ test }) => (test ? \"pink\" : \"none\")};\r\n  width: 100%;\r\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\r\n  background-size: cover;\r\n  background-position: center;\r\n`;\r\n\r\nexport const TextTitle = styled.p`\r\n  color: var(--white);\r\n  font-size: 18px;\r\n  font-weight: 500;\r\n  line-height: 1.6;\r\n`;\r\n\r\nexport const TextSubTitle = styled.p`\r\n  color: var(--white);\r\n  font-size: 14px;\r\n  line-height: 1.6;\r\n`;\r\n\r\nexport const TextDescription = styled.p`\r\n  color: var(--white);\r\n  font-size: 12px;\r\n  line-height: 1.6;\r\n`;\r\n\r\nexport const StyledClickable = styled.div`\r\n  :active {\r\n    opacity: 0.6;\r\n  }\r\n`;\r\n","const alchemyKey = \"wss://eth-rinkeby.alchemyapi.io/v2/d3g-2QLWS2IB8rUv1HdrvwI8lRARDwcj\";\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require(\"../contracts/NCC.json\");\r\nconst contractAddress = \"0x941C0CB3976cA5E2CEf5E5F46fe92433D35A0bd5\";\r\n\r\nexport const joinAlchemy = new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const obj = {\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n          address: addressArray[0],\r\n        };\r\n        return obj;\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"Oh no:  \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              {\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };\r\n\r\n  export const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_accounts\",\r\n        });\r\n        if (addressArray.length > 0) {\r\n          return {\r\n            address: addressArray[0],\r\n            status: \" Write a message in the text-field above.\",\r\n          };\r\n        } else {\r\n          return {\r\n            address: \"\",\r\n            status: \"Connect to Metamask using the top right button.\",\r\n          };\r\n        }\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \" \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              {\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };\r\n  ","import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {  \r\n  connectWallet,  \r\n  getCurrentWalletConnected,\r\n} from \"./util/interact.js\";\r\n\r\n\r\n\r\nconst HelloWorld = () => {\r\n  //state variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  //const data = useSelector((state) => state.data);\r\n  \r\n\r\n  //called only once\r\n  useEffect(async () => {\r\n    \r\n    const {address, status} = await getCurrentWalletConnected();\r\n    setWallet(address)\r\n    setStatus(status);\r\n\r\n    addWalletListener(); \r\n}, []);\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\" Write a message in the text-field above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\" Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          {\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  \r\n\r\n  //the UI of our component\r\n  return (\r\n    <div id=\"container\">\r\n      \r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n      \r\n      \r\n\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HelloWorld;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { connect } from \"./redux/blockchain/blockchainActions\";\r\nimport { fetchData } from \"./redux/data/dataActions\";\r\nimport * as s from \"./styles/globalStyles\";\r\nimport styled from \"styled-components\";\r\nimport { useWallet, UseWalletProvider } from 'use-wallet'\r\n\r\nimport HelloWorld from './HelloWorld'\r\n\r\n\r\nexport const StyledButton = styled.button`\r\n  padding: 10px;\r\n  border-radius: 50px;\r\n  border: none;\r\n  background-color: #ffffff;\r\n  padding: 10px;\r\n  font-weight: bold;\r\n  color: #000000;\r\n  width: 100px;\r\n  cursor: pointer;\r\n  box-shadow: 0px 6px 0px -2px rgba(250, 250, 250, 0.3);\r\n  -webkit-box-shadow: 0px 6px 0px -2px rgba(250, 250, 250, 0.3);\r\n  -moz-box-shadow: 0px 6px 0px -2px rgba(250, 250, 250, 0.3);\r\n  :active {\r\n    box-shadow: none;\r\n    -webkit-box-shadow: none;\r\n    -moz-box-shadow: none;\r\n  }\r\n`;\r\n\r\nexport const ResponsiveWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: stretched;\r\n  align-items: stretched;\r\n  width: 100%;\r\n  @media (min-width: 767px) {\r\n    flex-direction: row;\r\n  }\r\n`;\r\n\r\n\r\n\r\nfunction App() {\r\n  const wallet = useWallet()\r\n  const dispatch = useDispatch();\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  const data = useSelector((state) => state.data);\r\n  const [feedback, setFeedback] = useState(\"Maybe it's your lucky day.\");\r\n  const [claimingNft, setClaimingNft] = useState(false);\r\n  const [_mintAmount, setMintAmount] = useState(false);\r\n\r\n  const claimNFTs = (_mintAmount) => {\r\n    if (_mintAmount <= 0) {\r\n      return;\r\n    }\r\n  \r\n    setFeedback(`Minting your NFTS...`);\r\n    setClaimingNft(true);\r\n    blockchain.smartContract.methods\r\n      .mint(_mintAmount)\r\n      .send({\r\n        //gasLimit: \"285000\", //uncomment if ya want a limit\r\n        to: \"0x941C0CB3976cA5E2CEf5E5F46fe92433D35A0bd5\",\r\n        from: blockchain.account,\r\n        value: blockchain.web3.utils.toWei((0.05 * _mintAmount).toString(), \"ether\"),\r\n      })\r\n      .once(\"error\", (err) => {\r\n        console.log(err);\r\n        setFeedback(\"Sorry, something went wrong please try again later.\");\r\n        setClaimingNft(false);\r\n      })\r\n      .then((receipt) => {\r\n        console.log(receipt);\r\n        setFeedback(\r\n          `WOW, the NFT is yours! go visit Opensea.io to view it.`\r\n        );\r\n        setClaimingNft(false);\r\n        dispatch(fetchData(blockchain.account));\r\n      });\r\n  };\r\n  \r\n\r\n  const getData = () => {\r\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n      dispatch(fetchData(blockchain.account));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    \r\n    getData();\r\n    \r\n  }, [blockchain.account]);\r\n\r\n  return (\r\n    \r\n    <s.Screen>\r\n      <s.Container>         \r\n        <ResponsiveWrapper /*flex={1} style={{ padding: 24 }}*/>\r\n          <s.TextTitle style={{ textAlign: \"center\", fontSize: 35, fontWeight: \"bold\" }} > {data.totalSupply}/1000 </s.TextTitle>\r\n          <s.SpacerMedium />\r\n          <s.Container>\r\n            {Number(data.totalSupply) == 1000 ? ( //if 10000 bought already \r\n              <>\r\n                <s.TextTitle style={{ textAlign: \"center\" }}>\r\n                  The sale has ended.\r\n                </s.TextTitle>\r\n                <s.SpacerSmall />\r\n                <s.TextDescription style={{ textAlign: \"center\" }}>\r\n                  You can still find Hivis NFTS on{\" \"}\r\n                  <a\r\n                    target={\"_blank\"}\r\n                    href={\"https://testnets.opensea.io/collection/exhalenfttetsing\"}\r\n                  >\r\n                    Opensea.io\r\n                  </a>\r\n                </s.TextDescription>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <s.TextTitle style={{ textAlign: \"center\" }}>\r\n                  1 NFT costs 0.05 ETH.\r\n                </s.TextTitle>\r\n                <s.SpacerXSmall />\r\n                <s.TextDescription style={{ textAlign: \"center\" }}>\r\n                  Excluding gas fee.\r\n                </s.TextDescription>\r\n                <s.SpacerSmall />\r\n                <s.TextDescription style={{ textAlign: \"center\" }}>\r\n                  {feedback}\r\n                </s.TextDescription>\r\n                <s.SpacerMedium />\r\n                {blockchain.account === \"\" ||\r\n                blockchain.smartContract === null ? (\r\n                  <s.Container ai={\"center\"} jc={\"center\"}>\r\n                    <s.TextDescription style={{ textAlign: \"center\" }}>\r\n                      Connect to the ETH network\r\n                    </s.TextDescription>\r\n                    <s.SpacerSmall />\r\n                    <StyledButton\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        dispatch(connect());\r\n                        getData();\r\n                      }}\r\n                    >\r\n                      CONNECT\r\n                    </StyledButton>\r\n\r\n\r\n                    <HelloWorld></HelloWorld>\r\n\r\n\r\n\r\n                    {blockchain.errorMsg !== \"\" ? (\r\n                      <>\r\n                        <s.SpacerSmall />\r\n                        <s.TextDescription style={{ textAlign: \"center\" }}>\r\n                          {blockchain.errorMsg}\r\n                        </s.TextDescription>\r\n                      </>\r\n                    ) : null}\r\n                  </s.Container>\r\n                ) : (\r\n                  <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\r\n                    <StyledButton\r\n                      disabled={claimingNft ? 1 : 0}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        claimNFTs(1);\r\n                        getData();\r\n                      }}\r\n                    >\r\n                      {claimingNft ? \"BUSY\" : \"BUY 1\"}\r\n                    </StyledButton>\r\n                    <StyledButton\r\n                      disabled={claimingNft ? 5 : 0}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        claimNFTs(5);\r\n                        getData();\r\n                      }}\r\n                    >\r\n                      {claimingNft ? \"BUSY\" : \"BUY 5\"}\r\n                    </StyledButton>                    \r\n                    \r\n                  </s.Container>                  \r\n                )}\r\n              </>\r\n            )}\r\n          </s.Container>\r\n        </ResponsiveWrapper>      \r\n      </s.Container>\r\n      <h1>Wallet</h1>\r\n      {wallet.status === 'connected' ? (\r\n        <div>\r\n          <div>Account: {wallet.account}</div>\r\n          <div>Balance: {wallet.balance}</div>\r\n          <div>Balance: {wallet.chainId}</div>          \r\n          <div>Account: {blockchain.account}</div>\r\n          \r\n          {feedback}\r\n          {data.totalSupply}/1000\r\n          <button onClick={() => wallet.reset()}>disconnect</button>\r\n          <button disabled={claimingNft ? 1 : 0} onClick={(e) => {e.preventDefault();claimNFTs(5);getData();}}>Mint</button>\r\n          \r\n        </div>\r\n      ) : (\r\n        <div>\r\n          Connect:\r\n          <button onClick={(e) => {e.preventDefault(); wallet.connect();dispatch(connect());getData();}}>MetaMask</button>         \r\n          \r\n          \r\n          \r\n        </div>\r\n      )}\r\n    </s.Screen>\r\n\r\n    \r\n    \r\n  );\r\n}\r\n\r\n// Wrap everything in <UseWalletProvider />\r\nexport default () => (\r\n  <UseWalletProvider\r\n    chainId={4}\r\n    connectors={{\r\n      // This is how connectors get configured means Metamask\r\n      //provided: {provider: window.cleanEthereum}\r\n      portis: { dAppId: 'my-dapp-id-123-xyz' },\r\n    }}\r\n  >\r\n    <App />\r\n  </UseWalletProvider>\r\n)\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n//import \"./styles/reset.css\";\r\n//import \"./styles/theme.css\";\r\nimport \"./styles/webflow.js\";\r\n\r\nimport \"./styles/normalize.css\";\r\nimport \"./styles/webflow.css\";\r\nimport \"./styles/meka-network.webflow.css\";\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}